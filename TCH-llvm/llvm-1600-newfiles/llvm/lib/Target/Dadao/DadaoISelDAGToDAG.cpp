//===-- DadaoISelDAGToDAG.cpp - A dag to dag inst selector for Dadao ------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the Dadao target.
//
//===----------------------------------------------------------------------===//

#include "DadaoCondCode.h"
#include "DadaoMachineFunctionInfo.h"
#include "DadaoRegisterInfo.h"
#include "DadaoSubtarget.h"
#include "DadaoTargetMachine.h"
#include "MCTargetDesc/DadaoMCTargetDesc.h"
#include "llvm/CodeGen/ISDOpcodes.h"
#include "llvm/CodeGen/MachineConstantPool.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/CodeGen/SelectionDAGNodes.h"
#include "llvm/IR/CFG.h"
#include "llvm/IR/GlobalValue.h"
#include "llvm/IR/Instructions.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/IR/Type.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Target/TargetMachine.h"
#include <cassert>

using namespace llvm;

#define DEBUG_TYPE "dadao-isel"
#define PASS_NAME "Dadao DAG->DAG Pattern Instruction Selection"

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// DadaoDAGToDAGISel - Dadao specific code to select Dadao machine
// instructions for SelectionDAG operations.
//===----------------------------------------------------------------------===//
namespace {

class DadaoDAGToDAGISel : public SelectionDAGISel {
public:
  static char ID;

  DadaoDAGToDAGISel() = delete;

  explicit DadaoDAGToDAGISel(DadaoTargetMachine &TargetMachine)
      : SelectionDAGISel(ID, TargetMachine) {}

  bool runOnMachineFunction(MachineFunction &MF) override {
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  bool SelectInlineAsmMemoryOperand(const SDValue &Op, unsigned ConstraintCode,
                                    std::vector<SDValue> &OutOps) override;

private:
// Include the pieces autogenerated from the target description.
#include "DadaoGenDAGISel.inc"

  // Instruction Selection not handled by the auto-generated tablgen
  void Select(SDNode *N) override;

  // Support functions for the opcodes of Instruction Selection
  // not handled by the auto-generated tablgen
  void selectMUL(SDNode *N);
  void selectDIVREM(SDNode *N);
  void selectFrameIndex(SDNode *N);
  void selectSETCC(SDNode *N);
  void selectBR_CC(SDNode *N);
  void selectSELECT_CC(SDNode *N);
  void selectGlobalAddress(SDNode *N);
  void selectConstantPool(SDNode *N);

  // Complex Pattern for address selection.
  bool selectAddrRRII(SDValue Addr, SDValue &Base, SDValue &Offset);
  bool selectAddrRRRI(SDValue Addr, SDValue &Base, SDValue &Offset, SDValue &RegCnt);
  bool selectIndirectCallTarget(SDValue Addr, SDValue &BaseReg, SDValue &OffsetReg, SDValue &OffsetImm);

  // getI64Imm - Return a target constant with the specified value, of type i64.
  inline SDValue getI64Imm(unsigned Imm, const SDLoc &DL) {
    return CurDAG->getTargetConstant(Imm, DL, MVT::i64);
  }
};

} // namespace

char DadaoDAGToDAGISel::ID = 0;

INITIALIZE_PASS(DadaoDAGToDAGISel, DEBUG_TYPE, PASS_NAME, false, false)

bool DadaoDAGToDAGISel::selectAddrRRII(SDValue Addr, SDValue &Base,
                                         SDValue &Offset) {
  SDLoc DL(Addr);

  if (ConstantSDNode *CN = dyn_cast<ConstantSDNode>(Addr)) {
    // Fits in 12-bit signed immediate.
    if (isInt<12>(CN->getSExtValue())) {
      int16_t Imm = CN->getSExtValue();
      Offset = CurDAG->getTargetConstant(Imm, DL, CN->getValueType(0));
      Base = CurDAG->getRegister(Dadao::RDZERO, CN->getValueType(0));
      return true;
    }
  }

  // if Address is FI, get the TargetFrameIndex.
  if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    Base = CurDAG->getTargetFrameIndex(
        FIN->getIndex(),
        getTargetLowering()->getPointerTy(CurDAG->getDataLayout()));
    Offset = CurDAG->getTargetConstant(0, DL, MVT::i64);
    return true;
  }

  // Skip direct calls
  if ((Addr.getOpcode() == ISD::TargetExternalSymbol ||
       Addr.getOpcode() == ISD::TargetGlobalAddress))
    return false;

  // Address of the form imm + reg
  ISD::NodeType AluOperator = static_cast<ISD::NodeType>(Addr.getOpcode());
  if (AluOperator == ISD::ADD) {
    // Addresses of the form FI+const
    if (ConstantSDNode *CN = dyn_cast<ConstantSDNode>(Addr.getOperand(1)))
      if (isInt<12>(CN->getSExtValue())) {
        // If the first operand is a FI, get the TargetFI Node
        if (FrameIndexSDNode *FIN =
                dyn_cast<FrameIndexSDNode>(Addr.getOperand(0))) {
          Base = CurDAG->getTargetFrameIndex(
              FIN->getIndex(),
              getTargetLowering()->getPointerTy(CurDAG->getDataLayout()));
        } else {
          Base = Addr.getOperand(0);
        }

        Offset = CurDAG->getTargetConstant(CN->getSExtValue(), DL, MVT::i64);
        return true;
      }
  }

  Base = Addr;
  Offset = CurDAG->getTargetConstant(0, DL, MVT::i64);
  return true;
}

bool DadaoDAGToDAGISel::selectAddrRRRI(SDValue Addr, SDValue &RegBase, SDValue &RegOffset,
                                     SDValue &RegCnt) {
  // if Address is FI, get the TargetFrameIndex.
  if (Addr.getOpcode() == ISD::FrameIndex)
    return false;

  // Skip direct calls
  if ((Addr.getOpcode() == ISD::TargetExternalSymbol ||
       Addr.getOpcode() == ISD::TargetGlobalAddress))
    return false;

  // Address of the form OP + OP
  ISD::NodeType AluOperator = static_cast<ISD::NodeType>(Addr.getOpcode());
  if (AluOperator == ISD::ADD) {
    // Skip addresses of the form FI OP const
    if (ConstantSDNode *CN = dyn_cast<ConstantSDNode>(Addr.getOperand(1)))
      if (isInt<16>(CN->getSExtValue()))
        return false;

    // Skip addresses with hi/lo operands
    if (Addr.getOperand(0).getOpcode() == DadaoISD::HI ||
        Addr.getOperand(0).getOpcode() == DadaoISD::LO ||
        Addr.getOperand(1).getOpcode() == DadaoISD::HI ||
        Addr.getOperand(1).getOpcode() == DadaoISD::LO)
      return false;

    // Addresses of the form register OP register
    RegBase = Addr.getOperand(0);
    RegOffset = Addr.getOperand(1);
    // RegCnt is not set. So whenever we return true here, a null pointer will be accessed later, causing seg fault.
    // TODO: When LDT/STM is really needed, set RegCnt appropriately and return true.
    return false;
  }

// TODO:
//   RegCnt = CurDAG->getTargetConstant(RegCnt, SDLoc(Addr), MVT::i64);

  // Skip addresses with zero offset
  return false;
}

bool DadaoDAGToDAGISel::selectIndirectCallTarget(SDValue Addr, SDValue &BaseReg, SDValue &OffsetReg, SDValue &OffsetImm) {
  SDLoc DL(Addr);

  // Skip direct calls
  if ((Addr.getOpcode() == ISD::TargetExternalSymbol ||
       Addr.getOpcode() == ISD::TargetGlobalAddress))
    return false;
  
  // TODO: Recognize nonzero offset
  BaseReg = Addr;
  OffsetReg = CurDAG->getRegister(Dadao::RDZERO, MVT::i64);
  OffsetImm = CurDAG->getTargetConstant(0, DL, MVT::i64);
  return true;
}

bool DadaoDAGToDAGISel::SelectInlineAsmMemoryOperand(
    const SDValue &Op, unsigned ConstraintCode, std::vector<SDValue> &OutOps) {
  SDValue Op0, Op1, RegCnt;
  switch (ConstraintCode) {
  default:
    return true;
  case InlineAsm::Constraint_m: // memory
    if (!selectAddrRRRI(Op, Op0, Op1, RegCnt) &&
        !selectAddrRRII(Op, Op0, Op1))
      return true;
    break;
  }

  OutOps.push_back(Op0);
  OutOps.push_back(Op1);
  OutOps.push_back(RegCnt);
  return false;
}

// Select instructions not customized! Used for
// expanded, promoted and normal instructions
void DadaoDAGToDAGISel::Select(SDNode *Node) {
  unsigned Opcode = Node->getOpcode();

  // If we have a custom node, we already have selected!
  if (Node->isMachineOpcode()) {
    LLVM_DEBUG(errs() << "== "; Node->dump(CurDAG); errs() << "\n");
    return;
  }

  // Instruction Selection not handled by the auto-generated tablegen selection
  // should be handled here.
  EVT VT = Node->getValueType(0);
  switch (Opcode) {
  case ISD::Constant:
    if (VT == MVT::i64) {
      ConstantSDNode *ConstNode = cast<ConstantSDNode>(Node);
      // Materialize zero constants as copies from RDZERO. This allows the coalescer
      // to propagate these into other instructions.
      if (ConstNode->isZero()) {
        SDValue New = CurDAG->getCopyFromReg(CurDAG->getEntryNode(),
                                             SDLoc(Node), Dadao::RDZERO, MVT::i64);
        return ReplaceNode(Node, New.getNode());
      }
    }
    break;
  case ISD::MUL:
    selectMUL(Node);
    return;
  case ISD::SDIV:
  case ISD::UDIV:
  case ISD::SREM:
  case ISD::UREM:
    selectDIVREM(Node);
    return;
  case ISD::FrameIndex:
    selectFrameIndex(Node);
    return;
  case DadaoISD::SETCC:
    selectSETCC(Node);
    return;
  case DadaoISD::BR_CC:
    selectBR_CC(Node);
    return;
  case DadaoISD::SELECT_CC:
    selectSELECT_CC(Node);
    return;
  case ISD::GlobalAddress:
    selectGlobalAddress(Node);
    return;
  case ISD::ConstantPool:
    selectConstantPool(Node);
    return;
  default:
    break;
  }

  // Select the default instruction using patterns generated by tablegen.
  SelectCode(Node);
}

void DadaoDAGToDAGISel::selectMUL(SDNode *Node) {
  assert(Node->getNumValues() == 1 && "MUL should have only one value");
  assert(Node->getValueType(0) == MVT::i64 && "MUL should have type i64");
  SDLoc DL(Node);

  SDValue LHS = Node->getOperand(0);
  SDValue RHS = Node->getOperand(1);

  ReplaceUses(SDValue(Node, 0),
    SDValue(CurDAG->getMachineNode(Dadao::MULS_RRRR, DL, MVT::i64, MVT::i64, LHS, RHS), 1));
}

void DadaoDAGToDAGISel::selectDIVREM(SDNode *Node) {
  assert(Node->getNumValues() == 1 && "DIV or REM should have only one value");
  assert(Node->getValueType(0) == MVT::i64 && "DIV or REM should have type i64");
  SDLoc DL(Node);

  SDValue LHS = Node->getOperand(0);
  SDValue RHS = Node->getOperand(1);

  unsigned oldOpcode = Node->getOpcode();
  unsigned Opcode = Dadao::INSTRUCTION_LIST_END;
  if (oldOpcode == ISD::UDIV || oldOpcode == ISD::UREM)
    Opcode = Dadao::DIVU_RRRR;
  else
    Opcode = Dadao::DIVS_RRRR;

  unsigned resno = 1;
  if (oldOpcode == ISD::UREM || oldOpcode == ISD::SREM)
    resno = 0;

  ReplaceUses(SDValue(Node, 0),
    SDValue(CurDAG->getMachineNode(Opcode, DL, MVT::i64, MVT::i64, LHS, RHS), resno));
}

void DadaoDAGToDAGISel::selectFrameIndex(SDNode *Node) {
  SDLoc DL(Node);
  SDValue Imm = CurDAG->getTargetConstant(0, DL, MVT::i64);
  int FI = cast<FrameIndexSDNode>(Node)->getIndex();
  EVT VT = Node->getValueType(0);
  SDValue TFI = CurDAG->getTargetFrameIndex(FI, VT);
  unsigned Opc = Dadao::ADDI_RB_RRII;
  if (Node->hasOneUse()) {
    CurDAG->SelectNodeTo(Node, Opc, VT, TFI, Imm);
    return;
  }
  ReplaceNode(Node, CurDAG->getMachineNode(Opc, DL, VT, TFI, Imm));
}

void DadaoDAGToDAGISel::selectSETCC(SDNode *Node) {
  SDLoc DL(Node);

  SDNode *TargetCC = Node->getOperand(2).getNode();
  int64_t CC =
      cast<ConstantSDNode>(TargetCC)->getConstantIntValue()->getSExtValue();
  SDValue LHS = Node->getOperand(0);
  SDValue RHS = Node->getOperand(1);

  EVT VT = Node->getValueType(0); // This should always be MVT::i64 for SETCC
  SDValue Const_1 = CurDAG->getConstant(1, DL, MVT::i64);
  SDValue Const_0 = CurDAG->getConstant(0, DL, MVT::i64);
  SDValue Instr_a, Instr_b;
  SDNode *Instr_final;

  // Three cases: 1. signed cmp; 2. unsigned cmp; 3. equality
  switch (CC) {
  case LPCC::ICC_GT:
    Instr_a =
        SDValue(CurDAG->getMachineNode(Dadao::CMPS_ORRR, DL, VT, RHS, LHS), 0);
    Instr_b = CurDAG->getTargetConstant(63, DL, MVT::i64);
    Instr_final =
        CurDAG->getMachineNode(Dadao::SHRU_ORRI, DL, VT, Instr_a, Instr_b);
    break;
  case LPCC::ICC_LT:
    Instr_a =
        SDValue(CurDAG->getMachineNode(Dadao::CMPS_ORRR, DL, VT, LHS, RHS), 0);
    Instr_b = CurDAG->getTargetConstant(63, DL, MVT::i64);
    Instr_final =
        CurDAG->getMachineNode(Dadao::SHRU_ORRI, DL, VT, Instr_a, Instr_b);
    break;
  case LPCC::ICC_GE:
    Instr_a =
        SDValue(CurDAG->getMachineNode(Dadao::CMPS_ORRR, DL, VT, LHS, RHS), 0);
    Instr_final = CurDAG->getMachineNode(Dadao::CSN, DL, VT, Instr_a, Const_0, Const_1);
    break;
  case LPCC::ICC_LE:
    Instr_a =
        SDValue(CurDAG->getMachineNode(Dadao::CMPS_ORRR, DL, VT, RHS, LHS), 0);
    Instr_final = CurDAG->getMachineNode(Dadao::CSN, DL, VT, Instr_a, Const_0, Const_1);
    break;
  case LPCC::ICC_UGT:
    Instr_a =
        SDValue(CurDAG->getMachineNode(Dadao::CMPU_ORRR, DL, VT, RHS, LHS), 0);
    Instr_b = CurDAG->getTargetConstant(63, DL, MVT::i64);
    Instr_final =
        CurDAG->getMachineNode(Dadao::SHRU_ORRI, DL, VT, Instr_a, Instr_b);
    break;
  case LPCC::ICC_ULT:
    Instr_a =
        SDValue(CurDAG->getMachineNode(Dadao::CMPU_ORRR, DL, VT, LHS, RHS), 0);
    Instr_b = CurDAG->getTargetConstant(63, DL, MVT::i64);
    Instr_final =
        CurDAG->getMachineNode(Dadao::SHRU_ORRI, DL, VT, Instr_a, Instr_b);
    break;
  case LPCC::ICC_UGE:
    Instr_a =
        SDValue(CurDAG->getMachineNode(Dadao::CMPU_ORRR, DL, VT, LHS, RHS), 0);
    Instr_final = CurDAG->getMachineNode(Dadao::CSN, DL, VT, Instr_a, Const_0, Const_1);
    break;
  case LPCC::ICC_ULE:
    Instr_a =
        SDValue(CurDAG->getMachineNode(Dadao::CMPU_ORRR, DL, VT, RHS, LHS), 0);
    Instr_final = CurDAG->getMachineNode(Dadao::CSN, DL, VT, Instr_a, Const_0, Const_1);
    break;
  case LPCC::ICC_EQ:
    Instr_a =
        SDValue(CurDAG->getMachineNode(Dadao::CMPU_ORRR, DL, VT, LHS, RHS), 0);
    Instr_final = CurDAG->getMachineNode(Dadao::CSZ, DL, VT, Instr_a, Const_1, Const_0);
    break;
  case LPCC::ICC_NE:
    Instr_a =
        SDValue(CurDAG->getMachineNode(Dadao::CMPU_ORRR, DL, VT, LHS, RHS), 0);
    Instr_b = CurDAG->getTargetConstant(1, DL, MVT::i64);
    Instr_final =
        CurDAG->getMachineNode(Dadao::ANDI_RRII, DL, VT, Instr_a, Instr_b);
    break;
  default:
    llvm_unreachable("condition code not implemented yet");
  }
  ReplaceNode(Node, Instr_final);
  Select(Const_0.getNode());
  Select(Const_1.getNode());
}

void DadaoDAGToDAGISel::selectBR_CC(SDNode *Node) {
  SDLoc DL(Node);

  SDValue Chain = Node->getOperand(0);
  SDNode *TargetCC = Node->getOperand(1).getNode();
  int64_t CC =
      cast<ConstantSDNode>(TargetCC)->getConstantIntValue()->getSExtValue();
  SDValue LHS = Node->getOperand(2);
  SDValue RHS = Node->getOperand(3);
  SDNode *BranchDest = Node->getOperand(4).getNode();

  EVT VT = Node->getValueType(0);
  SDValue Instr_a;
  SDNode *Instr_final;

  if (CC == LPCC::ICC_PL) {
    Instr_final = CurDAG->getMachineNode(Dadao::BRNN_RIII, DL, VT, SDValue(BranchDest,0), LHS, Chain);
    ReplaceNode(Node, Instr_final);
    return;
  }
  if (CC == LPCC::ICC_MI) {
    Instr_final = CurDAG->getMachineNode(Dadao::BRN_RIII, DL, VT, SDValue(BranchDest,0), LHS, Chain);
    ReplaceNode(Node, Instr_final);
    return;
  }

  unsigned OpcodeCmp = Dadao::INSTRUCTION_LIST_END;
  unsigned OpcodeBr = Dadao::INSTRUCTION_LIST_END;
  switch (CC) {
    case LPCC::ICC_GT:
    case LPCC::ICC_LT:
    case LPCC::ICC_GE:
    case LPCC::ICC_LE:
      OpcodeCmp = Dadao::CMPS_ORRR;
      break;
    case LPCC::ICC_UGT:
    case LPCC::ICC_ULT:
    case LPCC::ICC_UGE:
    case LPCC::ICC_ULE:
      OpcodeCmp = Dadao::CMPU_ORRR;
      break;
    case LPCC::ICC_EQ:
    case LPCC::ICC_NE:
      // We don't need cmp instruction in this case.
      OpcodeCmp = Dadao::INSTRUCTION_LIST_END;
      break;
    default:
      llvm_unreachable("condition code not implemented yet");
  }
  switch (CC) {
    case LPCC::ICC_GT:
    case LPCC::ICC_UGT:
      OpcodeBr = Dadao::BRP_RIII;
      break;
    case LPCC::ICC_LT:
    case LPCC::ICC_ULT:
      OpcodeBr = Dadao::BRN_RIII;
      break;
    case LPCC::ICC_GE:
    case LPCC::ICC_UGE:
      OpcodeBr = Dadao::BRNN_RIII;
      break;
    case LPCC::ICC_LE:
    case LPCC::ICC_ULE:
      OpcodeBr = Dadao::BRNP_RIII;
      break;
    case LPCC::ICC_EQ:
      OpcodeBr = Dadao::BREQ_RRII;
      break;
    case LPCC::ICC_NE:
      OpcodeBr = Dadao::BRNE_RRII;
      break;
  }
  if (OpcodeCmp == Dadao::INSTRUCTION_LIST_END) {
    // EQ or NE
    SDValue Ops[] = { SDValue(BranchDest,0), LHS, RHS, Chain };
    Instr_final = CurDAG->getMachineNode(OpcodeBr, DL, VT, Ops);
  } else {
    // LT, GT, LE, GE, or their unsigned version
    Instr_a =
      SDValue(CurDAG->getMachineNode(OpcodeCmp, DL, MVT::i64, LHS, RHS), 0);
    Instr_final = CurDAG->getMachineNode(OpcodeBr, DL, VT, SDValue(BranchDest,0), Instr_a, Chain);
  }
  ReplaceNode(Node, Instr_final);
}

void DadaoDAGToDAGISel::selectSELECT_CC(SDNode *Node) {
  SDLoc DL(Node);

  SDValue LHS = Node->getOperand(0);
  SDValue RHS = Node->getOperand(1);
  SDValue TrueV = Node->getOperand(2);
  SDValue FalseV = Node->getOperand(3);
  SDValue TargetCC = Node->getOperand(4);

  EVT VT = Node->getValueType(0);

  SDValue InstrCmp = CurDAG->getNode(DadaoISD::SETCC, DL, VT, LHS, RHS, TargetCC);
  SDNode *Instr_final = CurDAG->getMachineNode(Dadao::CSP, DL, VT, InstrCmp, TrueV, FalseV);
  ReplaceNode(Node, Instr_final);
  Select(InstrCmp.getNode());
}

void DadaoDAGToDAGISel::selectGlobalAddress(SDNode *Node) {
  SDLoc DL(Node);
  const GlobalValue *GV = cast<GlobalAddressSDNode>(Node)->getGlobal();
  int64_t Offset = cast<GlobalAddressSDNode>(Node)->getOffset();
  SDValue tga = CurDAG->getTargetGlobalAddress(GV, DL, MVT::i64, Offset);
  ReplaceNode(Node, CurDAG->getMachineNode(Dadao::RD2RD_ORRI, DL, MVT::dadaoptr, tga));
}

void DadaoDAGToDAGISel::selectConstantPool(SDNode *Node) {
  SDLoc DL(Node);
  ConstantPoolSDNode *N = cast<ConstantPoolSDNode>(Node);
  const Constant *C = N->getConstVal();
  SDValue tcp = CurDAG->getTargetConstantPool(C, MVT::i64, N->getAlign(), N->getOffset());
  ReplaceNode(Node, CurDAG->getMachineNode(Dadao::RD2RD_ORRI, DL, MVT::dadaoptr, tcp));
}

// createDadaoISelDag - This pass converts a legalized DAG into a
// Dadao-specific DAG, ready for instruction scheduling.
FunctionPass *llvm::createDadaoISelDag(DadaoTargetMachine &TM) {
  return new DadaoDAGToDAGISel(TM);
}
