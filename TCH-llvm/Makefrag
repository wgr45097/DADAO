#
# Makefile for llvm-project
#
LLVM_1600_LOCAL		:= /pub/GITHUB/llvm/llvm-project.git
LLVM_1600_GITHUB	:= https://github.com/llvm/llvm-project.git
LLVM_1600_VERSION	:= llvmorg-16.0.0
LLVM_1600_BRANCH	:= dadao-1600

LLVM_1600_NEWFILES	:= $(DIR_DADAO_TOP)/TCH-llvm/llvm-1600-newfiles
LLVM_1600_PATCHES	:= $(DIR_DADAO_TOP)/TCH-llvm/llvm-1600-patches
LLVM_1600_FIXUPS	:= $(DIR_DADAO_TOP)/TCH-llvm/llvm-1600-fixups

LLVM_1600_SOURCE	:= $(DIR_DADAO_SOURCE)/llvm-1600
LLVM_1600_BUILD		:= $(DIR_DADAO_BUILD)/llvm-1600
LLVM_1600_INSTALL	?= $(DIR_DADAO_INSTALL)
LLVM_1600_LOG_STDOUT	:= $(DIR_DADAO_LOG)/llvm-1600.out
LLVM_1600_LOG_STDERR	:= $(DIR_DADAO_LOG)/llvm-1600.err

llvm-1600-clean:
	@echo "Remove old llvm source dir ..."
	@rm -fr $(LLVM_1600_SOURCE)
	@echo "Remove old llvm build dir ..."
	@rm -fr $(LLVM_1600_BUILD)

llvm-1600-source:
	@test -d $(DIR_DADAO_SOURCE) || mkdir -p $(DIR_DADAO_SOURCE)
	@rm -fr $(LLVM_1600_SOURCE)
ifeq ($(wildcard $(LLVM_1600_LOCAL)),)
	# Clone remote repo
	@git clone -q $(LLVM_1600_GITHUB) -- $(LLVM_1600_SOURCE)
else
	# Clone local repo
	@git clone -q $(LLVM_1600_LOCAL) -- $(LLVM_1600_SOURCE)
endif
	# Specify version
	@cd $(LLVM_1600_SOURCE); git checkout -qb $(LLVM_1600_BRANCH) $(LLVM_1600_VERSION)
	# clang newfiles
	@cp -a $(LLVM_1600_NEWFILES)/clang/* $(LLVM_1600_SOURCE)/clang/
	@cd $(LLVM_1600_SOURCE);					\
		git add clang;						\
		git commit -sm"DADAO: add clang support"
	# llvm newfiles
	@cp -a $(LLVM_1600_NEWFILES)/llvm/* $(LLVM_1600_SOURCE)/llvm/
	@cd $(LLVM_1600_SOURCE);					\
		git add llvm;						\
		git commit -sm"DADAO: add llvm support"
	# Patches
	@cd $(LLVM_1600_SOURCE); test ! -d $(LLVM_1600_PATCHES) || git am $(LLVM_1600_PATCHES)/*.patch
	# Fixups
	@cd $(LLVM_1600_SOURCE); test ! -d $(LLVM_1600_FIXUPS) || git am $(LLVM_1600_FIXUPS)/*.patch

llvm-1600-build-new:
	@rm -fr $(LLVM_1600_BUILD)
	@mkdir -p $(LLVM_1600_BUILD)
	# NOTE: $(LLVM_1600_SOURCE)/build is softlink to $(LLVM_1600_BUILD)
	@ln -s $(LLVM_1600_BUILD) $(LLVM_1600_SOURCE)/build
	@cmake -S $(LLVM_1600_SOURCE)/llvm -B $(LLVM_1600_BUILD) -G Ninja	\
		-DCMAKE_BUILD_TYPE=Debug					\
		-DCMAKE_C_COMPILER_LAUNCHER=ccache				\
		-DCMAKE_CXX_COMPILER_LAUNCHER=ccache				\
		-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \
		-DCMAKE_EXPORT_COMPILE_COMMANDS=1 \
		-DCMAKE_INSTALL_PREFIX=$(LLVM_1600_INSTALL)			\
		-DLLVM_TARGETS_TO_BUILD="Dadao"					\
		-DLLVM_ENABLE_PROJECTS="clang;lld"				\
		-DLLVM_BUILD_RUNTIMES=OFF					\
		-DLLVM_INCLUDE_TESTS=ON						\
		-DLLVM_INCLUDE_EXAMPLES=OFF					\
		-DLLVM_ENABLE_BACKTRACES=OFF					\
		-DLLVM_ENABLE_ASSERTIONS=ON					\
		-DLLVM_OPTIMIZED_TABLEGEN=OFF					\
		-DLLVM_USE_SPLIT_DWARF=ON					\
		-DLLVM_PARALLEL_COMPILE_JOBS=$(_DADAO_CORES_)			\
		-DLLVM_USE_LINKER=mold

llvm-1600-build:
	@cd $(LLVM_1600_BUILD); cmake --build .

llvm-1600-install:
	@cd $(LLVM_1600_BUILD); cmake --install .

llvm-1600-highfive:
	@echo "BEGIN TO BUILD llvm-1600                         at `date +%T`"
	@echo "0. Remove old logfiles                           at `date +%T`"
	@test -d $(DIR_DADAO_LOG) || mkdir -p $(DIR_DADAO_LOG)
	@rm -fr $(LLVM_1600_LOG_STDOUT) $(LLVM_1600_LOG_STDERR)
	@echo "1. Clean old dirs                                at `date +%T`"
	@make -s llvm-1600-clean				1>> $(LLVM_1600_LOG_STDOUT) 2>> $(LLVM_1600_LOG_STDERR)
	@echo "2. New source                                    at `date +%T`"
	@make -s llvm-1600-source				1>> $(LLVM_1600_LOG_STDOUT) 2>> $(LLVM_1600_LOG_STDERR)
	@echo "3. Configure                                     at `date +%T`"
	@make -s llvm-1600-build-new				1>> $(LLVM_1600_LOG_STDOUT) 2>> $(LLVM_1600_LOG_STDERR)
	@echo "4. Build                                         at `date +%T`"
	@make -s llvm-1600-build				1>> $(LLVM_1600_LOG_STDOUT) 2>> $(LLVM_1600_LOG_STDERR)
	@echo "5. Install                                       at `date +%T`"
	@make -s llvm-1600-install				1>> $(LLVM_1600_LOG_STDOUT) 2>> $(LLVM_1600_LOG_STDERR)
	@echo "BUILD llvm-1600 DONE!                            at `date +%T`"

llvm-1600-check-llvm:
	@ninja -C $(LLVM_1600_BUILD) check-llvm

llvm-1600-check-lit:
	@ $(LLVM_1600_BUILD)/bin/llvm-lit $(LLVM_1600_SOURCE)/llvm/test/ -v --vg --vg-leak > $(LLVM_1600_SOURCE)/llvm/test/lit.sum

###
LLVM_1600_TABLEGEN	:= $(LLVM_1600_BUILD)/bin/llvm-tblgen			\
				-I $(LLVM_1600_SOURCE)/llvm/lib/Target/Dadao/		\
				-I $(LLVM_1600_BUILD)/include/				\
				-I $(LLVM_1600_SOURCE)/llvm/include/			\
				-I $(LLVM_1600_SOURCE)/llvm/lib/Target/			\
				$(LLVM_1600_SOURCE)/llvm/lib/Target/Dadao/Dadao.td

llvm-1600-tablegen-dagisel:
	@$(LLVM_1600_TABLEGEN) -o $(DIR_DADAO_TARGET)/DadaoGenDAGISel.inc		-gen-dag-isel -debug


llvm-1600-tablegen:
	# -print-enum samples
	@$(LLVM_1600_TABLEGEN)	-print-enums -class=RegisterClass
	@$(LLVM_1600_TABLEGEN)	-print-enums -class=Register
	# output files in $(DIR_DADAO_TARGET)
	@$(LLVM_1600_TABLEGEN) -o $(DIR_DADAO_TARGET)/DadaoGenAsmMatcher.inc		-gen-asm-matcher
	@$(LLVM_1600_TABLEGEN) -o $(DIR_DADAO_TARGET)/DadaoGenAsmWriter.inc		-gen-asm-writer
	@$(LLVM_1600_TABLEGEN) -o $(DIR_DADAO_TARGET)/DadaoGenCallingConv.inc		-gen-callingconv
	@$(LLVM_1600_TABLEGEN) -o $(DIR_DADAO_TARGET)/DadaoGenDAGISel.inc		-gen-dag-isel
	@$(LLVM_1600_TABLEGEN) -o $(DIR_DADAO_TARGET)/DadaoGenDisassemblerTables.inc	-gen-disassembler
	@$(LLVM_1600_TABLEGEN) -o $(DIR_DADAO_TARGET)/DadaoGenInstrInfo.inc		-gen-instr-info
	@$(LLVM_1600_TABLEGEN) -o $(DIR_DADAO_TARGET)/DadaoGenMCCodeEmitter.inc		-gen-emitter
	@$(LLVM_1600_TABLEGEN) -o $(DIR_DADAO_TARGET)/DadaoGenRegisterInfo.inc		-gen-register-info
	@$(LLVM_1600_TABLEGEN) -o $(DIR_DADAO_TARGET)/DadaoGenSubtargetInfo.inc		-gen-subtarget

